{"version":3,"sources":["assets/logo.svg","redux/todosSlice.ts","components/Todo.tsx","components/TodoList.tsx","util/index.ts","components/AddTodoModal.tsx","App.tsx","redux/store.ts","index.tsx"],"names":["todoSlice","createSlice","name","initialState","reducers","addTodo","reducer","state","action","push","payload","prepare","todo","id","uuidv4","isComplete","deleteTodo","filter","item","editTodo","map","actions","useStyles","makeStyles","theme","listItem","display","justifyContent","width","alignItems","breakpoints","up","deleteIcon","color","background","Todo","useState","isChecked","setIsChecked","editText","useRef","classes","dispatch","useDispatch","className","style","textDecoration","opacity","undefined","Checkbox","checked","onChange","e","target","inputProps","html","onBlur","console","log","current","value","onClick","TodoList","todos","length","keyCodes","modalBackdrop","position","zIndex","top","left","height","backgroundColor","modalContent","flexDirection","margin","spacing","border","borderRadius","padding","form","AddTodoModal","isModal","newTodo","setNewTodo","inputError","setInputError","role","tabIndex","stopPropagation","Typography","variant","TextField","type","placeholder","label","helperText","error","Button","preventDefault","trim","onKeyDown","keyCode","size","root","flexGrow","appContainer","textAlign","palette","text","secondary","img","addButton","bottom","right","App","useSelector","modalVisibility","setModalVisibility","toggleAddTodoModal","src","logo","alt","Fab","Fade","in","Paper","store","configureStore","todosReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8ffa6dd3.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.02afe57c.svg\";","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nconst initialState = [] as any;\r\n\r\nconst todoSlice = createSlice({\r\n  name: 'todo', //  generated action types\r\n  initialState,\r\n  //  state handling happens below\r\n  reducers: {\r\n    addTodo: {\r\n      reducer: (state, action: PayloadAction<Todo>) => {\r\n        state.push(action.payload);\r\n      },\r\n      prepare: (todo: string) => ({\r\n        payload: {\r\n          id: uuidv4(),\r\n          todo,\r\n          isComplete: false,\r\n        } as Todo,\r\n      }),\r\n    },\r\n    deleteTodo(state, action: PayloadAction<string>) {\r\n      //  createReducer(). You need to ensure that you either mutate the state argument or return a new state, but not both.\r\n      return state.filter((item: Todo) => item.id !== action.payload);\r\n    },\r\n    editTodo(state, { payload }: PayloadAction<Todo>) {\r\n      state.map((item: Todo) => (item.id === payload.id ? (item.todo = payload.todo) : item));\r\n    },\r\n    isComplete(state, { payload }: PayloadAction<Todo>) {\r\n      state.map((item: Todo) => (item.id === payload.id ? (item.isComplete = payload.isComplete) : state));\r\n    },\r\n  },\r\n});\r\n\r\nexport const\r\n{\r\n  addTodo, deleteTodo, editTodo, isComplete,\r\n} = todoSlice.actions;\r\nexport default todoSlice.reducer;\r\n","import { useState, useRef } from 'react';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { useDispatch } from 'react-redux';\r\nimport ContentEditable from 'react-contenteditable';\r\nimport { AppDispatch } from '../redux/store';\r\nimport { deleteTodo, editTodo, isComplete } from '../redux/todosSlice';\r\n\r\ninterface TodoListItemProps {\r\n  todo: Todo['todo'];\r\n  id: Todo['id'];\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  listItem: {\r\n    display: 'flex',\r\n    justifyContent: 'space-between',\r\n    width: '100%',\r\n    alignItems: 'center',\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: 360,\r\n    },\r\n  },\r\n  deleteIcon: {\r\n    color: 'blue',\r\n    '&:hover': {\r\n      color: 'red',\r\n    },\r\n  },\r\n  editTodo: {\r\n    background: 'blue',\r\n  },\r\n}));\r\n\r\nconst Todo = ({ todo, id }: TodoListItemProps) => {\r\n  const [isChecked, setIsChecked] = useState<boolean>(false);\r\n\r\n  const editText = useRef('');\r\n  const classes = useStyles();\r\n\r\n  const dispatch = useDispatch<AppDispatch>();\r\n\r\n  const handleChange = (e: any) => {\r\n    editText.current = e.target.value;\r\n    dispatch(\r\n      editTodo({\r\n        id,\r\n        todo: e.target.value,\r\n        isComplete: false,\r\n      }),\r\n    );\r\n  };\r\n\r\n  const handleCheckbox = (e: any) => {\r\n    setIsChecked(e.target.checked);\r\n    dispatch(isComplete({ id, todo, isComplete: !isChecked }));\r\n  };\r\n\r\n  return (\r\n    <li\r\n      className={classes.listItem}\r\n      style={isChecked ? { textDecoration: 'line-through', opacity: '0.7' } : undefined}\r\n    >\r\n      <Checkbox\r\n        checked={isChecked}\r\n        onChange={handleCheckbox}\r\n        inputProps={{ 'aria-label': 'primary checkbox' }}\r\n      />\r\n      <ContentEditable\r\n        html={todo}\r\n        onBlur={() => console.log(editText.current)}\r\n        onChange={handleChange}\r\n      />\r\n      <DeleteIcon\r\n        className={classes.deleteIcon}\r\n        onClick={() => dispatch(deleteTodo(id))}\r\n      />\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default Todo;\r\n","import React from 'react';\r\nimport TodoListItem from './Todo';\r\n\r\ninterface TodoListProps {\r\n  todos: Array<Todo>;\r\n}\r\n\r\nconst TodoList: React.FC<TodoListProps> = ({ todos }: TodoListProps) => (\r\n  <ul>\r\n    {todos.length > 0\r\n      ? todos.map((item) => (\r\n        <TodoListItem\r\n          todo={item.todo}\r\n          id={item.id}\r\n          key={item.id}\r\n        />\r\n      ))\r\n      : null}\r\n  </ul>\r\n);\r\n\r\nexport default TodoList;\r\n","export const keyCodes = {\r\n  enter: 13,\r\n  space: 32,\r\n  esc: 27,\r\n  left: 37,\r\n  up: 38,\r\n  right: 39,\r\n  down: 40,\r\n  delete: 46,\r\n};\r\n","import {\r\n Button, TextField, Typography, makeStyles,\r\n} from '@material-ui/core';\r\nimport React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { keyCodes } from '../util/index';\r\nimport { addTodo } from '../redux/todosSlice';\r\nimport { AppDispatch } from '../redux/store';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  modalBackdrop: {\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    position: 'fixed',\r\n    zIndex: 1,\r\n    top: 0,\r\n    left: 0,\r\n    width: '100%', // or maxWidth: 360, no breakpoint needed\r\n    height: '100%',\r\n    backgroundColor: 'rgba(0, 0, 0, 0.25)',\r\n  },\r\n  modalContent: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    justifyContent: 'space-evenly',\r\n    width: '100%',\r\n    height: '60%',\r\n    margin: theme.spacing(2),\r\n    background: 'white',\r\n    border: '2px solid white',\r\n    borderRadius: 5,\r\n    padding: theme.spacing(4),\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: 360,\r\n    },\r\n  },\r\n  form: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    justifyContent: 'space-evenly',\r\n    height: '100%',\r\n  },\r\n}));\r\n\r\ninterface AddTodoProps {\r\n  isModal: () => void;\r\n}\r\n\r\nconst AddTodoModal: React.FC<AddTodoProps> = ({\r\n  isModal,\r\n}: // addTodo,\r\nAddTodoProps) => {\r\n  const classes = useStyles();\r\n\r\n  const [newTodo, setNewTodo] = useState<string>('');\r\n  const [inputError, setInputError] = useState<string>('');\r\n\r\n  const dispatch = useDispatch<AppDispatch>();\r\n\r\n  const handleSubmit = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n\r\n    if (newTodo.length === 0 || newTodo.trim() === '') {\r\n      setInputError('Input is empty. Please enter a todo');\r\n    } else {\r\n      dispatch(addTodo(newTodo));\r\n      setNewTodo('');\r\n      isModal();\r\n      setInputError('');\r\n    }\r\n  };\r\n  const handleKeyDown = ({ target, keyCode }: any) => {\r\n    if (\r\n      keyCode !== keyCodes.enter\r\n      || target.value.length < 2\r\n      || target.value.trim() === ''\r\n    ) {\r\n      setInputError('Input is empty. Please enter a todo');\r\n    } else {\r\n      dispatch(addTodo(newTodo));\r\n      setNewTodo('');\r\n      isModal();\r\n      setInputError('');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      aria-label=\"close modal\"\r\n      role=\"button\"\r\n      tabIndex={keyCodes.esc}\r\n      onClick={isModal}\r\n      className={classes.modalBackdrop}\r\n    >\r\n      <div\r\n        role=\"button\"\r\n        tabIndex={keyCodes.esc}\r\n        onClick={(e) => {\r\n          e.stopPropagation();\r\n        }}\r\n        className={classes.modalContent}\r\n      >\r\n        <Typography variant=\"h3\">Add Your Todo</Typography>\r\n        <form className={classes.form}>\r\n          <TextField\r\n            onChange={(e) => setNewTodo(e.target.value)}\r\n            type=\"text\"\r\n            name=\"todo\"\r\n            placeholder=\"What do you have todo?\"\r\n            value={newTodo}\r\n            id=\"filled-basic\"\r\n            label=\"Add Todo\"\r\n            variant=\"outlined\"\r\n            helperText={inputError}\r\n            error={!!inputError} // double bang converts string into boolean\r\n          />\r\n          <Button\r\n            onClick={handleSubmit}\r\n            onKeyDown={handleKeyDown}\r\n            variant=\"outlined\"\r\n            size=\"large\"\r\n            color=\"primary\"\r\n            type=\"submit\"\r\n          >\r\n            Add Todo\r\n          </Button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddTodoModal;\r\n","import React, { useState } from 'react';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { useSelector } from 'react-redux';\r\nimport logo from './assets/logo.svg';\r\nimport TodoList from './components/TodoList';\r\nimport AddTodoModal from './components/AddTodoModal';\r\nimport { RootState } from './redux/store';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  appContainer: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    height: '80vh',\r\n    padding: theme.spacing(2),\r\n    textAlign: 'center',\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  img: {\r\n    width: 190,\r\n    margin: 50,\r\n    height: 50,\r\n  },\r\n  addButton: {\r\n    position: 'fixed',\r\n    bottom: 24,\r\n    right: 24,\r\n  },\r\n}));\r\n\r\nconst App: React.FC = () => {\r\n  const classes = useStyles();\r\n\r\n  const selectTodos = (state: RootState) => state;\r\n\r\n  const todos = useSelector(selectTodos);\r\n\r\n  const [modalVisibility, setModalVisibility] = useState(false);\r\n\r\n  const toggleAddTodoModal = (): void => setModalVisibility(!modalVisibility);\r\n\r\n  // const handleDelete = (todoId: Todo['id']): void => setTodos(todos.filter((item) => item.id !== todoId));\r\n\r\n  return (\r\n    <>\r\n      <div className={classes.appContainer}>\r\n        <h1>Todos</h1>\r\n        <img src={logo} alt=\"gilmnd-logo\" className={classes.img} />\r\n        {todos.length === 0 && <h4>Your Todo Will Be Added Here</h4>}\r\n        <TodoList todos={todos} />\r\n        <Fab\r\n          onClick={toggleAddTodoModal}\r\n          className={classes.addButton}\r\n          color=\"primary\"\r\n          aria-label=\"add\"\r\n        >\r\n          <AddIcon />\r\n        </Fab>\r\n        {modalVisibility && (\r\n          <Fade in={modalVisibility}>\r\n            <Paper>\r\n              <AddTodoModal isModal={toggleAddTodoModal} />\r\n            </Paper>\r\n          </Fade>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport todosReducer from './todosSlice';\r\n\r\nexport const store = configureStore({\r\n  reducer: todosReducer,\r\n});\r\n\r\n//  types will be used in App as useSelector and useDispatch\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport type RootState = ReturnType<typeof store.getState>;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { Provider } from 'react-redux';\r\nimport App from './App';\r\nimport { store } from './redux/store';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}